#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Current_info")]
	public partial class Current_infoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertPowerFacility(PowerFacility instance);
    partial void UpdatePowerFacility(PowerFacility instance);
    partial void DeletePowerFacility(PowerFacility instance);
    partial void InsertEquipmentClass(EquipmentClass instance);
    partial void UpdateEquipmentClass(EquipmentClass instance);
    partial void DeleteEquipmentClass(EquipmentClass instance);
    partial void InsertEquipmentType(EquipmentType instance);
    partial void UpdateEquipmentType(EquipmentType instance);
    partial void DeleteEquipmentType(EquipmentType instance);
    partial void InsertVoltageLevel(VoltageLevel instance);
    partial void UpdateVoltageLevel(VoltageLevel instance);
    partial void DeleteVoltageLevel(VoltageLevel instance);
    partial void InsertDispatchingCenter(DispatchingCenter instance);
    partial void UpdateDispatchingCenter(DispatchingCenter instance);
    partial void DeleteDispatchingCenter(DispatchingCenter instance);
    partial void InsertCurrentDepend(CurrentDepend instance);
    partial void UpdateCurrentDepend(CurrentDepend instance);
    partial void DeleteCurrentDepend(CurrentDepend instance);
    partial void InsertPowerLineDispatchingVision(PowerLineDispatchingVision instance);
    partial void UpdatePowerLineDispatchingVision(PowerLineDispatchingVision instance);
    partial void DeletePowerLineDispatchingVision(PowerLineDispatchingVision instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertPowerLineDiscription(PowerLineDiscription instance);
    partial void UpdatePowerLineDiscription(PowerLineDiscription instance);
    partial void DeletePowerLineDiscription(PowerLineDiscription instance);
    partial void InsertTCurrentDepend(TCurrentDepend instance);
    partial void UpdateTCurrentDepend(TCurrentDepend instance);
    partial void DeleteTCurrentDepend(TCurrentDepend instance);
    partial void InsertPowerLineComposition(PowerLineComposition instance);
    partial void UpdatePowerLineComposition(PowerLineComposition instance);
    partial void DeletePowerLineComposition(PowerLineComposition instance);
    partial void InsertElementCurrentLimit(ElementCurrentLimit instance);
    partial void UpdateElementCurrentLimit(ElementCurrentLimit instance);
    partial void DeleteElementCurrentLimit(ElementCurrentLimit instance);
    #endregion
		
		public Current_infoDataContext() : 
				base(global::Data.Properties.Settings.Default.Current_infoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Current_infoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Current_infoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Current_infoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Current_infoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PowerFacility> PowerFacility
		{
			get
			{
				return this.GetTable<PowerFacility>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentClass> EquipmentClass
		{
			get
			{
				return this.GetTable<EquipmentClass>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentType> EquipmentType
		{
			get
			{
				return this.GetTable<EquipmentType>();
			}
		}
		
		public System.Data.Linq.Table<VoltageLevel> VoltageLevel
		{
			get
			{
				return this.GetTable<VoltageLevel>();
			}
		}
		
		public System.Data.Linq.Table<DispatchingCenter> DispatchingCenter
		{
			get
			{
				return this.GetTable<DispatchingCenter>();
			}
		}
		
		public System.Data.Linq.Table<CurrentDepend> CurrentDepend
		{
			get
			{
				return this.GetTable<CurrentDepend>();
			}
		}
		
		public System.Data.Linq.Table<PowerLineDispatchingVision> PowerLineDispatchingVision
		{
			get
			{
				return this.GetTable<PowerLineDispatchingVision>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipment
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<PowerLineDiscription> PowerLineDiscription
		{
			get
			{
				return this.GetTable<PowerLineDiscription>();
			}
		}
		
		public System.Data.Linq.Table<TCurrentDepend> TCurrentDepend
		{
			get
			{
				return this.GetTable<TCurrentDepend>();
			}
		}
		
		public System.Data.Linq.Table<PowerLineComposition> PowerLineComposition
		{
			get
			{
				return this.GetTable<PowerLineComposition>();
			}
		}
		
		public System.Data.Linq.Table<ElementCurrentLimit> ElementCurrentLimit
		{
			get
			{
				return this.GetTable<ElementCurrentLimit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerFacility")]
	public partial class PowerFacility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DispatchName;
		
		private EntitySet<Equipment> _Equipment;
		
		private EntitySet<PowerLineDiscription> _PowerLineDiscription;
		
		private EntitySet<PowerLineDiscription> _PowerLineDiscription1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDispatchNameChanging(string value);
    partial void OnDispatchNameChanged();
    #endregion
		
		public PowerFacility()
		{
			this._Equipment = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipment), new Action<Equipment>(this.detach_Equipment));
			this._PowerLineDiscription = new EntitySet<PowerLineDiscription>(new Action<PowerLineDiscription>(this.attach_PowerLineDiscription), new Action<PowerLineDiscription>(this.detach_PowerLineDiscription));
			this._PowerLineDiscription1 = new EntitySet<PowerLineDiscription>(new Action<PowerLineDiscription>(this.attach_PowerLineDiscription1), new Action<PowerLineDiscription>(this.detach_PowerLineDiscription1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string DispatchName
		{
			get
			{
				return this._DispatchName;
			}
			set
			{
				if ((this._DispatchName != value))
				{
					this.OnDispatchNameChanging(value);
					this.SendPropertyChanging();
					this._DispatchName = value;
					this.SendPropertyChanged("DispatchName");
					this.OnDispatchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_Equipment", Storage="_Equipment", ThisKey="ID", OtherKey="IDPowerFacility")]
		public EntitySet<Equipment> Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				this._Equipment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_PowerLineDiscription", Storage="_PowerLineDiscription", ThisKey="ID", OtherKey="IDPowerFacilityEnd")]
		public EntitySet<PowerLineDiscription> PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription;
			}
			set
			{
				this._PowerLineDiscription.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_PowerLineDiscription1", Storage="_PowerLineDiscription1", ThisKey="ID", OtherKey="IDPowerFacilityStart")]
		public EntitySet<PowerLineDiscription> PowerLineDiscription1
		{
			get
			{
				return this._PowerLineDiscription1;
			}
			set
			{
				this._PowerLineDiscription1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipment(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility = this;
		}
		
		private void detach_Equipment(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility = null;
		}
		
		private void attach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility = this;
		}
		
		private void detach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility = null;
		}
		
		private void attach_PowerLineDiscription1(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility1 = this;
		}
		
		private void detach_PowerLineDiscription1(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.PowerFacility1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentClass")]
	public partial class EquipmentClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ClassName;
		
		private EntitySet<EquipmentType> _EquipmentType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    #endregion
		
		public EquipmentClass()
		{
			this._EquipmentType = new EntitySet<EquipmentType>(new Action<EquipmentType>(this.attach_EquipmentType), new Action<EquipmentType>(this.detach_EquipmentType));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentClass_EquipmentType", Storage="_EquipmentType", ThisKey="ID", OtherKey="IDClass")]
		public EntitySet<EquipmentType> EquipmentType
		{
			get
			{
				return this._EquipmentType;
			}
			set
			{
				this._EquipmentType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentType(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentClass = this;
		}
		
		private void detach_EquipmentType(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentType")]
	public partial class EquipmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDClass;
		
		private string _TypeName;
		
		private int _IDVoltageLevel;
		
		private int _Inom;
		
		private EntitySet<Equipment> _Equipment;
		
		private EntityRef<EquipmentClass> _EquipmentClass;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDClassChanging(int value);
    partial void OnIDClassChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIDVoltageLevelChanging(int value);
    partial void OnIDVoltageLevelChanged();
    partial void OnInomChanging(int value);
    partial void OnInomChanged();
    #endregion
		
		public EquipmentType()
		{
			this._Equipment = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipment), new Action<Equipment>(this.detach_Equipment));
			this._EquipmentClass = default(EntityRef<EquipmentClass>);
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDClass", DbType="Int NOT NULL")]
		public int IDClass
		{
			get
			{
				return this._IDClass;
			}
			set
			{
				if ((this._IDClass != value))
				{
					if (this._EquipmentClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDClassChanging(value);
					this.SendPropertyChanging();
					this._IDClass = value;
					this.SendPropertyChanged("IDClass");
					this.OnIDClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDVoltageLevel", DbType="Int NOT NULL")]
		public int IDVoltageLevel
		{
			get
			{
				return this._IDVoltageLevel;
			}
			set
			{
				if ((this._IDVoltageLevel != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDVoltageLevelChanging(value);
					this.SendPropertyChanging();
					this._IDVoltageLevel = value;
					this.SendPropertyChanged("IDVoltageLevel");
					this.OnIDVoltageLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inom", DbType="Int NOT NULL")]
		public int Inom
		{
			get
			{
				return this._Inom;
			}
			set
			{
				if ((this._Inom != value))
				{
					this.OnInomChanging(value);
					this.SendPropertyChanging();
					this._Inom = value;
					this.SendPropertyChanged("Inom");
					this.OnInomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_Equipment", ThisKey="ID", OtherKey="IDType")]
		public EntitySet<Equipment> Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				this._Equipment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentClass_EquipmentType", Storage="_EquipmentClass", ThisKey="IDClass", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentClass EquipmentClass
		{
			get
			{
				return this._EquipmentClass.Entity;
			}
			set
			{
				EquipmentClass previousValue = this._EquipmentClass.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentClass.Entity = null;
						previousValue.EquipmentType.Remove(this);
					}
					this._EquipmentClass.Entity = value;
					if ((value != null))
					{
						value.EquipmentType.Add(this);
						this._IDClass = value.ID;
					}
					else
					{
						this._IDClass = default(int);
					}
					this.SendPropertyChanged("EquipmentClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_EquipmentType", Storage="_VoltageLevel", ThisKey="IDVoltageLevel", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.EquipmentType.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.EquipmentType.Add(this);
						this._IDVoltageLevel = value.ID;
					}
					else
					{
						this._IDVoltageLevel = default(int);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipment(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = this;
		}
		
		private void detach_Equipment(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoltageLevel")]
	public partial class VoltageLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VoltageLevel1;
		
		private EntitySet<EquipmentType> _EquipmentType;
		
		private EntitySet<PowerLineDiscription> _PowerLineDiscription;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoltageLevel1Changing(int value);
    partial void OnVoltageLevel1Changed();
    #endregion
		
		public VoltageLevel()
		{
			this._EquipmentType = new EntitySet<EquipmentType>(new Action<EquipmentType>(this.attach_EquipmentType), new Action<EquipmentType>(this.detach_EquipmentType));
			this._PowerLineDiscription = new EntitySet<PowerLineDiscription>(new Action<PowerLineDiscription>(this.attach_PowerLineDiscription), new Action<PowerLineDiscription>(this.detach_PowerLineDiscription));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="VoltageLevel", Storage="_VoltageLevel1", DbType="Int NOT NULL")]
		public int VoltageLevel1
		{
			get
			{
				return this._VoltageLevel1;
			}
			set
			{
				if ((this._VoltageLevel1 != value))
				{
					this.OnVoltageLevel1Changing(value);
					this.SendPropertyChanging();
					this._VoltageLevel1 = value;
					this.SendPropertyChanged("VoltageLevel1");
					this.OnVoltageLevel1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_EquipmentType", Storage="_EquipmentType", ThisKey="ID", OtherKey="IDVoltageLevel")]
		public EntitySet<EquipmentType> EquipmentType
		{
			get
			{
				return this._EquipmentType;
			}
			set
			{
				this._EquipmentType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_PowerLineDiscription", Storage="_PowerLineDiscription", ThisKey="ID", OtherKey="IDVoltageLevel")]
		public EntitySet<PowerLineDiscription> PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription;
			}
			set
			{
				this._PowerLineDiscription.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentType(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_EquipmentType(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
		
		private void attach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = this;
		}
		
		private void detach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.VoltageLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DispatchingCenter")]
	public partial class DispatchingCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NameDispatchingCenter;
		
		private EntitySet<PowerLineDispatchingVision> _PowerLineDispatchingVision;
		
		private EntitySet<PowerLineDiscription> _PowerLineDiscription;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameDispatchingCenterChanging(string value);
    partial void OnNameDispatchingCenterChanged();
    #endregion
		
		public DispatchingCenter()
		{
			this._PowerLineDispatchingVision = new EntitySet<PowerLineDispatchingVision>(new Action<PowerLineDispatchingVision>(this.attach_PowerLineDispatchingVision), new Action<PowerLineDispatchingVision>(this.detach_PowerLineDispatchingVision));
			this._PowerLineDiscription = new EntitySet<PowerLineDiscription>(new Action<PowerLineDiscription>(this.attach_PowerLineDiscription), new Action<PowerLineDiscription>(this.detach_PowerLineDiscription));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameDispatchingCenter", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string NameDispatchingCenter
		{
			get
			{
				return this._NameDispatchingCenter;
			}
			set
			{
				if ((this._NameDispatchingCenter != value))
				{
					this.OnNameDispatchingCenterChanging(value);
					this.SendPropertyChanging();
					this._NameDispatchingCenter = value;
					this.SendPropertyChanged("NameDispatchingCenter");
					this.OnNameDispatchingCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchingCenter_PowerLineDispatchingVision", Storage="_PowerLineDispatchingVision", ThisKey="ID", OtherKey="IDDispatchingCenterVision")]
		public EntitySet<PowerLineDispatchingVision> PowerLineDispatchingVision
		{
			get
			{
				return this._PowerLineDispatchingVision;
			}
			set
			{
				this._PowerLineDispatchingVision.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchingCenter_PowerLineDiscription", Storage="_PowerLineDiscription", ThisKey="ID", OtherKey="IDDispatchingCenterControl")]
		public EntitySet<PowerLineDiscription> PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription;
			}
			set
			{
				this._PowerLineDiscription.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PowerLineDispatchingVision(PowerLineDispatchingVision entity)
		{
			this.SendPropertyChanging();
			entity.DispatchingCenter = this;
		}
		
		private void detach_PowerLineDispatchingVision(PowerLineDispatchingVision entity)
		{
			this.SendPropertyChanging();
			entity.DispatchingCenter = null;
		}
		
		private void attach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.DispatchingCenter = this;
		}
		
		private void detach_PowerLineDiscription(PowerLineDiscription entity)
		{
			this.SendPropertyChanging();
			entity.DispatchingCenter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentDepend")]
	public partial class CurrentDepend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeOfCurrentLoad;
		
		private string _AllowTime;
		
		private EntitySet<TCurrentDepend> _TCurrentDepend;
		
		private EntitySet<ElementCurrentLimit> _ElementCurrentLimit;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeOfCurrentLoadChanging(string value);
    partial void OnTypeOfCurrentLoadChanged();
    partial void OnAllowTimeChanging(string value);
    partial void OnAllowTimeChanged();
    #endregion
		
		public CurrentDepend()
		{
			this._TCurrentDepend = new EntitySet<TCurrentDepend>(new Action<TCurrentDepend>(this.attach_TCurrentDepend), new Action<TCurrentDepend>(this.detach_TCurrentDepend));
			this._ElementCurrentLimit = new EntitySet<ElementCurrentLimit>(new Action<ElementCurrentLimit>(this.attach_ElementCurrentLimit), new Action<ElementCurrentLimit>(this.detach_ElementCurrentLimit));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfCurrentLoad", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string TypeOfCurrentLoad
		{
			get
			{
				return this._TypeOfCurrentLoad;
			}
			set
			{
				if ((this._TypeOfCurrentLoad != value))
				{
					this.OnTypeOfCurrentLoadChanging(value);
					this.SendPropertyChanging();
					this._TypeOfCurrentLoad = value;
					this.SendPropertyChanged("TypeOfCurrentLoad");
					this.OnTypeOfCurrentLoadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowTime", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AllowTime
		{
			get
			{
				return this._AllowTime;
			}
			set
			{
				if ((this._AllowTime != value))
				{
					this.OnAllowTimeChanging(value);
					this.SendPropertyChanging();
					this._AllowTime = value;
					this.SendPropertyChanged("AllowTime");
					this.OnAllowTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentDepend_TCurrentDepend", Storage="_TCurrentDepend", ThisKey="ID", OtherKey="IDCurrentDepend")]
		public EntitySet<TCurrentDepend> TCurrentDepend
		{
			get
			{
				return this._TCurrentDepend;
			}
			set
			{
				this._TCurrentDepend.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentDepend_ElementCurrentLimit", Storage="_ElementCurrentLimit", ThisKey="ID", OtherKey="IDCurrentDepend")]
		public EntitySet<ElementCurrentLimit> ElementCurrentLimit
		{
			get
			{
				return this._ElementCurrentLimit;
			}
			set
			{
				this._ElementCurrentLimit.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TCurrentDepend(TCurrentDepend entity)
		{
			this.SendPropertyChanging();
			entity.CurrentDepend = this;
		}
		
		private void detach_TCurrentDepend(TCurrentDepend entity)
		{
			this.SendPropertyChanging();
			entity.CurrentDepend = null;
		}
		
		private void attach_ElementCurrentLimit(ElementCurrentLimit entity)
		{
			this.SendPropertyChanging();
			entity.CurrentDepend = this;
		}
		
		private void detach_ElementCurrentLimit(ElementCurrentLimit entity)
		{
			this.SendPropertyChanging();
			entity.CurrentDepend = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerLineDispatchingVision")]
	public partial class PowerLineDispatchingVision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPowerLine;
		
		private int _IDDispatchingCenterVision;
		
		private EntityRef<DispatchingCenter> _DispatchingCenter;
		
		private EntityRef<PowerLineDiscription> _PowerLineDiscription;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPowerLineChanging(int value);
    partial void OnIDPowerLineChanged();
    partial void OnIDDispatchingCenterVisionChanging(int value);
    partial void OnIDDispatchingCenterVisionChanged();
    #endregion
		
		public PowerLineDispatchingVision()
		{
			this._DispatchingCenter = default(EntityRef<DispatchingCenter>);
			this._PowerLineDiscription = default(EntityRef<PowerLineDiscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerLine", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPowerLine
		{
			get
			{
				return this._IDPowerLine;
			}
			set
			{
				if ((this._IDPowerLine != value))
				{
					if (this._PowerLineDiscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerLineChanging(value);
					this.SendPropertyChanging();
					this._IDPowerLine = value;
					this.SendPropertyChanged("IDPowerLine");
					this.OnIDPowerLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDispatchingCenterVision", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDDispatchingCenterVision
		{
			get
			{
				return this._IDDispatchingCenterVision;
			}
			set
			{
				if ((this._IDDispatchingCenterVision != value))
				{
					if (this._DispatchingCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDispatchingCenterVisionChanging(value);
					this.SendPropertyChanging();
					this._IDDispatchingCenterVision = value;
					this.SendPropertyChanged("IDDispatchingCenterVision");
					this.OnIDDispatchingCenterVisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchingCenter_PowerLineDispatchingVision", Storage="_DispatchingCenter", ThisKey="IDDispatchingCenterVision", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DispatchingCenter DispatchingCenter
		{
			get
			{
				return this._DispatchingCenter.Entity;
			}
			set
			{
				DispatchingCenter previousValue = this._DispatchingCenter.Entity;
				if (((previousValue != value) 
							|| (this._DispatchingCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DispatchingCenter.Entity = null;
						previousValue.PowerLineDispatchingVision.Remove(this);
					}
					this._DispatchingCenter.Entity = value;
					if ((value != null))
					{
						value.PowerLineDispatchingVision.Add(this);
						this._IDDispatchingCenterVision = value.ID;
					}
					else
					{
						this._IDDispatchingCenterVision = default(int);
					}
					this.SendPropertyChanged("DispatchingCenter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_PowerLineDispatchingVision", Storage="_PowerLineDiscription", ThisKey="IDPowerLine", OtherKey="ID", IsForeignKey=true)]
		public PowerLineDiscription PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription.Entity;
			}
			set
			{
				PowerLineDiscription previousValue = this._PowerLineDiscription.Entity;
				if (((previousValue != value) 
							|| (this._PowerLineDiscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerLineDiscription.Entity = null;
						previousValue.PowerLineDispatchingVision.Remove(this);
					}
					this._PowerLineDiscription.Entity = value;
					if ((value != null))
					{
						value.PowerLineDispatchingVision.Add(this);
						this._IDPowerLine = value.ID;
					}
					else
					{
						this._IDPowerLine = default(int);
					}
					this.SendPropertyChanged("PowerLineDiscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDPowerFacility;
		
		private int _IDClass;
		
		private int _IDType;
		
		private string _DispatchName;
		
		private System.Nullable<float> _Length;
		
		private System.Nullable<int> _NumberOfWires;
		
		private EntitySet<TCurrentDepend> _TCurrentDepend;
		
		private EntitySet<PowerLineComposition> _PowerLineComposition;
		
		private EntityRef<EquipmentType> _EquipmentType;
		
		private EntityRef<PowerFacility> _PowerFacility;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDPowerFacilityChanging(int value);
    partial void OnIDPowerFacilityChanged();
    partial void OnIDClassChanging(int value);
    partial void OnIDClassChanged();
    partial void OnIDTypeChanging(int value);
    partial void OnIDTypeChanged();
    partial void OnDispatchNameChanging(string value);
    partial void OnDispatchNameChanged();
    partial void OnLengthChanging(System.Nullable<float> value);
    partial void OnLengthChanged();
    partial void OnNumberOfWiresChanging(System.Nullable<int> value);
    partial void OnNumberOfWiresChanged();
    #endregion
		
		public Equipment()
		{
			this._TCurrentDepend = new EntitySet<TCurrentDepend>(new Action<TCurrentDepend>(this.attach_TCurrentDepend), new Action<TCurrentDepend>(this.detach_TCurrentDepend));
			this._PowerLineComposition = new EntitySet<PowerLineComposition>(new Action<PowerLineComposition>(this.attach_PowerLineComposition), new Action<PowerLineComposition>(this.detach_PowerLineComposition));
			this._EquipmentType = default(EntityRef<EquipmentType>);
			this._PowerFacility = default(EntityRef<PowerFacility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerFacility", DbType="Int NOT NULL")]
		public int IDPowerFacility
		{
			get
			{
				return this._IDPowerFacility;
			}
			set
			{
				if ((this._IDPowerFacility != value))
				{
					if (this._PowerFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerFacilityChanging(value);
					this.SendPropertyChanging();
					this._IDPowerFacility = value;
					this.SendPropertyChanged("IDPowerFacility");
					this.OnIDPowerFacilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDClass", DbType="Int NOT NULL")]
		public int IDClass
		{
			get
			{
				return this._IDClass;
			}
			set
			{
				if ((this._IDClass != value))
				{
					this.OnIDClassChanging(value);
					this.SendPropertyChanging();
					this._IDClass = value;
					this.SendPropertyChanged("IDClass");
					this.OnIDClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int NOT NULL")]
		public int IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					if (this._EquipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string DispatchName
		{
			get
			{
				return this._DispatchName;
			}
			set
			{
				if ((this._DispatchName != value))
				{
					this.OnDispatchNameChanging(value);
					this.SendPropertyChanging();
					this._DispatchName = value;
					this.SendPropertyChanged("DispatchName");
					this.OnDispatchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Real")]
		public System.Nullable<float> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfWires", DbType="Int")]
		public System.Nullable<int> NumberOfWires
		{
			get
			{
				return this._NumberOfWires;
			}
			set
			{
				if ((this._NumberOfWires != value))
				{
					this.OnNumberOfWiresChanging(value);
					this.SendPropertyChanging();
					this._NumberOfWires = value;
					this.SendPropertyChanged("NumberOfWires");
					this.OnNumberOfWiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_TCurrentDepend", Storage="_TCurrentDepend", ThisKey="ID", OtherKey="IDEquipment")]
		public EntitySet<TCurrentDepend> TCurrentDepend
		{
			get
			{
				return this._TCurrentDepend;
			}
			set
			{
				this._TCurrentDepend.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_PowerLineComposition", Storage="_PowerLineComposition", ThisKey="ID", OtherKey="IDEquipment")]
		public EntitySet<PowerLineComposition> PowerLineComposition
		{
			get
			{
				return this._PowerLineComposition;
			}
			set
			{
				this._PowerLineComposition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_EquipmentType", ThisKey="IDType", OtherKey="ID", IsForeignKey=true)]
		public EquipmentType EquipmentType
		{
			get
			{
				return this._EquipmentType.Entity;
			}
			set
			{
				EquipmentType previousValue = this._EquipmentType.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentType.Entity = null;
						previousValue.Equipment.Remove(this);
					}
					this._EquipmentType.Entity = value;
					if ((value != null))
					{
						value.Equipment.Add(this);
						this._IDType = value.ID;
					}
					else
					{
						this._IDType = default(int);
					}
					this.SendPropertyChanged("EquipmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_Equipment", Storage="_PowerFacility", ThisKey="IDPowerFacility", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PowerFacility PowerFacility
		{
			get
			{
				return this._PowerFacility.Entity;
			}
			set
			{
				PowerFacility previousValue = this._PowerFacility.Entity;
				if (((previousValue != value) 
							|| (this._PowerFacility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerFacility.Entity = null;
						previousValue.Equipment.Remove(this);
					}
					this._PowerFacility.Entity = value;
					if ((value != null))
					{
						value.Equipment.Add(this);
						this._IDPowerFacility = value.ID;
					}
					else
					{
						this._IDPowerFacility = default(int);
					}
					this.SendPropertyChanged("PowerFacility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TCurrentDepend(TCurrentDepend entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_TCurrentDepend(TCurrentDepend entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
		
		private void attach_PowerLineComposition(PowerLineComposition entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_PowerLineComposition(PowerLineComposition entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerLineDiscription")]
	public partial class PowerLineDiscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DispatchName;
		
		private int _IDVoltageLevel;
		
		private int _IDDispatchingCenterControl;
		
		private int _IDPowerFacilityStart;
		
		private int _IDPowerFacilityEnd;
		
		private string _UserItem;
		
		private EntitySet<PowerLineDispatchingVision> _PowerLineDispatchingVision;
		
		private EntitySet<PowerLineComposition> _PowerLineComposition;
		
		private EntitySet<ElementCurrentLimit> _ElementCurrentLimit;
		
		private EntityRef<DispatchingCenter> _DispatchingCenter;
		
		private EntityRef<PowerFacility> _PowerFacility;
		
		private EntityRef<PowerFacility> _PowerFacility1;
		
		private EntityRef<VoltageLevel> _VoltageLevel;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDispatchNameChanging(string value);
    partial void OnDispatchNameChanged();
    partial void OnIDVoltageLevelChanging(int value);
    partial void OnIDVoltageLevelChanged();
    partial void OnIDDispatchingCenterControlChanging(int value);
    partial void OnIDDispatchingCenterControlChanged();
    partial void OnIDPowerFacilityStartChanging(int value);
    partial void OnIDPowerFacilityStartChanged();
    partial void OnIDPowerFacilityEndChanging(int value);
    partial void OnIDPowerFacilityEndChanged();
    partial void OnUserItemChanging(string value);
    partial void OnUserItemChanged();
    #endregion
		
		public PowerLineDiscription()
		{
			this._PowerLineDispatchingVision = new EntitySet<PowerLineDispatchingVision>(new Action<PowerLineDispatchingVision>(this.attach_PowerLineDispatchingVision), new Action<PowerLineDispatchingVision>(this.detach_PowerLineDispatchingVision));
			this._PowerLineComposition = new EntitySet<PowerLineComposition>(new Action<PowerLineComposition>(this.attach_PowerLineComposition), new Action<PowerLineComposition>(this.detach_PowerLineComposition));
			this._ElementCurrentLimit = new EntitySet<ElementCurrentLimit>(new Action<ElementCurrentLimit>(this.attach_ElementCurrentLimit), new Action<ElementCurrentLimit>(this.detach_ElementCurrentLimit));
			this._DispatchingCenter = default(EntityRef<DispatchingCenter>);
			this._PowerFacility = default(EntityRef<PowerFacility>);
			this._PowerFacility1 = default(EntityRef<PowerFacility>);
			this._VoltageLevel = default(EntityRef<VoltageLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DispatchName
		{
			get
			{
				return this._DispatchName;
			}
			set
			{
				if ((this._DispatchName != value))
				{
					this.OnDispatchNameChanging(value);
					this.SendPropertyChanging();
					this._DispatchName = value;
					this.SendPropertyChanged("DispatchName");
					this.OnDispatchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDVoltageLevel", DbType="Int NOT NULL")]
		public int IDVoltageLevel
		{
			get
			{
				return this._IDVoltageLevel;
			}
			set
			{
				if ((this._IDVoltageLevel != value))
				{
					if (this._VoltageLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDVoltageLevelChanging(value);
					this.SendPropertyChanging();
					this._IDVoltageLevel = value;
					this.SendPropertyChanged("IDVoltageLevel");
					this.OnIDVoltageLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDispatchingCenterControl", DbType="Int NOT NULL")]
		public int IDDispatchingCenterControl
		{
			get
			{
				return this._IDDispatchingCenterControl;
			}
			set
			{
				if ((this._IDDispatchingCenterControl != value))
				{
					if (this._DispatchingCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDispatchingCenterControlChanging(value);
					this.SendPropertyChanging();
					this._IDDispatchingCenterControl = value;
					this.SendPropertyChanged("IDDispatchingCenterControl");
					this.OnIDDispatchingCenterControlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerFacilityStart", DbType="Int NOT NULL")]
		public int IDPowerFacilityStart
		{
			get
			{
				return this._IDPowerFacilityStart;
			}
			set
			{
				if ((this._IDPowerFacilityStart != value))
				{
					if (this._PowerFacility1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerFacilityStartChanging(value);
					this.SendPropertyChanging();
					this._IDPowerFacilityStart = value;
					this.SendPropertyChanged("IDPowerFacilityStart");
					this.OnIDPowerFacilityStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerFacilityEnd", DbType="Int NOT NULL")]
		public int IDPowerFacilityEnd
		{
			get
			{
				return this._IDPowerFacilityEnd;
			}
			set
			{
				if ((this._IDPowerFacilityEnd != value))
				{
					if (this._PowerFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerFacilityEndChanging(value);
					this.SendPropertyChanging();
					this._IDPowerFacilityEnd = value;
					this.SendPropertyChanged("IDPowerFacilityEnd");
					this.OnIDPowerFacilityEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserItem", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserItem
		{
			get
			{
				return this._UserItem;
			}
			set
			{
				if ((this._UserItem != value))
				{
					this.OnUserItemChanging(value);
					this.SendPropertyChanging();
					this._UserItem = value;
					this.SendPropertyChanged("UserItem");
					this.OnUserItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_PowerLineDispatchingVision", Storage="_PowerLineDispatchingVision", ThisKey="ID", OtherKey="IDPowerLine")]
		public EntitySet<PowerLineDispatchingVision> PowerLineDispatchingVision
		{
			get
			{
				return this._PowerLineDispatchingVision;
			}
			set
			{
				this._PowerLineDispatchingVision.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_PowerLineComposition", Storage="_PowerLineComposition", ThisKey="ID", OtherKey="IDPowerLine")]
		public EntitySet<PowerLineComposition> PowerLineComposition
		{
			get
			{
				return this._PowerLineComposition;
			}
			set
			{
				this._PowerLineComposition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_ElementCurrentLimit", Storage="_ElementCurrentLimit", ThisKey="ID", OtherKey="IDPowerLine")]
		public EntitySet<ElementCurrentLimit> ElementCurrentLimit
		{
			get
			{
				return this._ElementCurrentLimit;
			}
			set
			{
				this._ElementCurrentLimit.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchingCenter_PowerLineDiscription", Storage="_DispatchingCenter", ThisKey="IDDispatchingCenterControl", OtherKey="ID", IsForeignKey=true)]
		public DispatchingCenter DispatchingCenter
		{
			get
			{
				return this._DispatchingCenter.Entity;
			}
			set
			{
				DispatchingCenter previousValue = this._DispatchingCenter.Entity;
				if (((previousValue != value) 
							|| (this._DispatchingCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DispatchingCenter.Entity = null;
						previousValue.PowerLineDiscription.Remove(this);
					}
					this._DispatchingCenter.Entity = value;
					if ((value != null))
					{
						value.PowerLineDiscription.Add(this);
						this._IDDispatchingCenterControl = value.ID;
					}
					else
					{
						this._IDDispatchingCenterControl = default(int);
					}
					this.SendPropertyChanged("DispatchingCenter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_PowerLineDiscription", Storage="_PowerFacility", ThisKey="IDPowerFacilityEnd", OtherKey="ID", IsForeignKey=true)]
		public PowerFacility PowerFacility
		{
			get
			{
				return this._PowerFacility.Entity;
			}
			set
			{
				PowerFacility previousValue = this._PowerFacility.Entity;
				if (((previousValue != value) 
							|| (this._PowerFacility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerFacility.Entity = null;
						previousValue.PowerLineDiscription.Remove(this);
					}
					this._PowerFacility.Entity = value;
					if ((value != null))
					{
						value.PowerLineDiscription.Add(this);
						this._IDPowerFacilityEnd = value.ID;
					}
					else
					{
						this._IDPowerFacilityEnd = default(int);
					}
					this.SendPropertyChanged("PowerFacility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerFacility_PowerLineDiscription1", Storage="_PowerFacility1", ThisKey="IDPowerFacilityStart", OtherKey="ID", IsForeignKey=true)]
		public PowerFacility PowerFacility1
		{
			get
			{
				return this._PowerFacility1.Entity;
			}
			set
			{
				PowerFacility previousValue = this._PowerFacility1.Entity;
				if (((previousValue != value) 
							|| (this._PowerFacility1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerFacility1.Entity = null;
						previousValue.PowerLineDiscription1.Remove(this);
					}
					this._PowerFacility1.Entity = value;
					if ((value != null))
					{
						value.PowerLineDiscription1.Add(this);
						this._IDPowerFacilityStart = value.ID;
					}
					else
					{
						this._IDPowerFacilityStart = default(int);
					}
					this.SendPropertyChanged("PowerFacility1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoltageLevel_PowerLineDiscription", Storage="_VoltageLevel", ThisKey="IDVoltageLevel", OtherKey="ID", IsForeignKey=true)]
		public VoltageLevel VoltageLevel
		{
			get
			{
				return this._VoltageLevel.Entity;
			}
			set
			{
				VoltageLevel previousValue = this._VoltageLevel.Entity;
				if (((previousValue != value) 
							|| (this._VoltageLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoltageLevel.Entity = null;
						previousValue.PowerLineDiscription.Remove(this);
					}
					this._VoltageLevel.Entity = value;
					if ((value != null))
					{
						value.PowerLineDiscription.Add(this);
						this._IDVoltageLevel = value.ID;
					}
					else
					{
						this._IDVoltageLevel = default(int);
					}
					this.SendPropertyChanged("VoltageLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PowerLineDispatchingVision(PowerLineDispatchingVision entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = this;
		}
		
		private void detach_PowerLineDispatchingVision(PowerLineDispatchingVision entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = null;
		}
		
		private void attach_PowerLineComposition(PowerLineComposition entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = this;
		}
		
		private void detach_PowerLineComposition(PowerLineComposition entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = null;
		}
		
		private void attach_ElementCurrentLimit(ElementCurrentLimit entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = this;
		}
		
		private void detach_ElementCurrentLimit(ElementCurrentLimit entity)
		{
			this.SendPropertyChanging();
			entity.PowerLineDiscription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TCurrentDepend")]
	public partial class TCurrentDepend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEquipment;
		
		private int _IDCurrentDepend;
		
		private int _Temp;
		
		private int _Current;
		
		private double _Kcorr;
		
		private EntityRef<CurrentDepend> _CurrentDepend;
		
		private EntityRef<Equipment> _Equipment;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEquipmentChanging(int value);
    partial void OnIDEquipmentChanged();
    partial void OnIDCurrentDependChanging(int value);
    partial void OnIDCurrentDependChanged();
    partial void OnTempChanging(int value);
    partial void OnTempChanged();
    partial void OnCurrentChanging(int value);
    partial void OnCurrentChanged();
    partial void OnKcorrChanging(double value);
    partial void OnKcorrChanged();
    #endregion
		
		public TCurrentDepend()
		{
			this._CurrentDepend = default(EntityRef<CurrentDepend>);
			this._Equipment = default(EntityRef<Equipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEquipment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDEquipment
		{
			get
			{
				return this._IDEquipment;
			}
			set
			{
				if ((this._IDEquipment != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEquipmentChanging(value);
					this.SendPropertyChanging();
					this._IDEquipment = value;
					this.SendPropertyChanged("IDEquipment");
					this.OnIDEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCurrentDepend", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCurrentDepend
		{
			get
			{
				return this._IDCurrentDepend;
			}
			set
			{
				if ((this._IDCurrentDepend != value))
				{
					if (this._CurrentDepend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCurrentDependChanging(value);
					this.SendPropertyChanging();
					this._IDCurrentDepend = value;
					this.SendPropertyChanged("IDCurrentDepend");
					this.OnIDCurrentDependChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Temp
		{
			get
			{
				return this._Temp;
			}
			set
			{
				if ((this._Temp != value))
				{
					this.OnTempChanging(value);
					this.SendPropertyChanging();
					this._Temp = value;
					this.SendPropertyChanged("Temp");
					this.OnTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current]", Storage="_Current", DbType="Int NOT NULL")]
		public int Current
		{
			get
			{
				return this._Current;
			}
			set
			{
				if ((this._Current != value))
				{
					this.OnCurrentChanging(value);
					this.SendPropertyChanging();
					this._Current = value;
					this.SendPropertyChanged("Current");
					this.OnCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kcorr", DbType="Float NOT NULL")]
		public double Kcorr
		{
			get
			{
				return this._Kcorr;
			}
			set
			{
				if ((this._Kcorr != value))
				{
					this.OnKcorrChanging(value);
					this.SendPropertyChanging();
					this._Kcorr = value;
					this.SendPropertyChanged("Kcorr");
					this.OnKcorrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentDepend_TCurrentDepend", Storage="_CurrentDepend", ThisKey="IDCurrentDepend", OtherKey="ID", IsForeignKey=true)]
		public CurrentDepend CurrentDepend
		{
			get
			{
				return this._CurrentDepend.Entity;
			}
			set
			{
				CurrentDepend previousValue = this._CurrentDepend.Entity;
				if (((previousValue != value) 
							|| (this._CurrentDepend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentDepend.Entity = null;
						previousValue.TCurrentDepend.Remove(this);
					}
					this._CurrentDepend.Entity = value;
					if ((value != null))
					{
						value.TCurrentDepend.Add(this);
						this._IDCurrentDepend = value.ID;
					}
					else
					{
						this._IDCurrentDepend = default(int);
					}
					this.SendPropertyChanged("CurrentDepend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_TCurrentDepend", Storage="_Equipment", ThisKey="IDEquipment", OtherKey="ID", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.TCurrentDepend.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.TCurrentDepend.Add(this);
						this._IDEquipment = value.ID;
					}
					else
					{
						this._IDEquipment = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerLineComposition")]
	public partial class PowerLineComposition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPowerLine;
		
		private int _IDElementPosition;
		
		private int _IDEquipmentPosition;
		
		private int _IDEquipment;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<PowerLineDiscription> _PowerLineDiscription;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPowerLineChanging(int value);
    partial void OnIDPowerLineChanged();
    partial void OnIDElementPositionChanging(int value);
    partial void OnIDElementPositionChanged();
    partial void OnIDEquipmentPositionChanging(int value);
    partial void OnIDEquipmentPositionChanged();
    partial void OnIDEquipmentChanging(int value);
    partial void OnIDEquipmentChanged();
    #endregion
		
		public PowerLineComposition()
		{
			this._Equipment = default(EntityRef<Equipment>);
			this._PowerLineDiscription = default(EntityRef<PowerLineDiscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerLine", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPowerLine
		{
			get
			{
				return this._IDPowerLine;
			}
			set
			{
				if ((this._IDPowerLine != value))
				{
					if (this._PowerLineDiscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerLineChanging(value);
					this.SendPropertyChanging();
					this._IDPowerLine = value;
					this.SendPropertyChanged("IDPowerLine");
					this.OnIDPowerLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDElementPosition", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDElementPosition
		{
			get
			{
				return this._IDElementPosition;
			}
			set
			{
				if ((this._IDElementPosition != value))
				{
					this.OnIDElementPositionChanging(value);
					this.SendPropertyChanging();
					this._IDElementPosition = value;
					this.SendPropertyChanged("IDElementPosition");
					this.OnIDElementPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEquipmentPosition", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDEquipmentPosition
		{
			get
			{
				return this._IDEquipmentPosition;
			}
			set
			{
				if ((this._IDEquipmentPosition != value))
				{
					this.OnIDEquipmentPositionChanging(value);
					this.SendPropertyChanging();
					this._IDEquipmentPosition = value;
					this.SendPropertyChanged("IDEquipmentPosition");
					this.OnIDEquipmentPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEquipment", DbType="Int NOT NULL")]
		public int IDEquipment
		{
			get
			{
				return this._IDEquipment;
			}
			set
			{
				if ((this._IDEquipment != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEquipmentChanging(value);
					this.SendPropertyChanging();
					this._IDEquipment = value;
					this.SendPropertyChanged("IDEquipment");
					this.OnIDEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_PowerLineComposition", Storage="_Equipment", ThisKey="IDEquipment", OtherKey="ID", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.PowerLineComposition.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.PowerLineComposition.Add(this);
						this._IDEquipment = value.ID;
					}
					else
					{
						this._IDEquipment = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_PowerLineComposition", Storage="_PowerLineDiscription", ThisKey="IDPowerLine", OtherKey="ID", IsForeignKey=true)]
		public PowerLineDiscription PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription.Entity;
			}
			set
			{
				PowerLineDiscription previousValue = this._PowerLineDiscription.Entity;
				if (((previousValue != value) 
							|| (this._PowerLineDiscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerLineDiscription.Entity = null;
						previousValue.PowerLineComposition.Remove(this);
					}
					this._PowerLineDiscription.Entity = value;
					if ((value != null))
					{
						value.PowerLineComposition.Add(this);
						this._IDPowerLine = value.ID;
					}
					else
					{
						this._IDPowerLine = default(int);
					}
					this.SendPropertyChanged("PowerLineDiscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ElementCurrentLimit")]
	public partial class ElementCurrentLimit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPowerLine;
		
		private int _IDElementPosition;
		
		private int _IDCurrentDepend;
		
		private int _Temp;
		
		private int _MinCurrent;
		
		private EntityRef<CurrentDepend> _CurrentDepend;
		
		private EntityRef<PowerLineDiscription> _PowerLineDiscription;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPowerLineChanging(int value);
    partial void OnIDPowerLineChanged();
    partial void OnIDElementPositionChanging(int value);
    partial void OnIDElementPositionChanged();
    partial void OnIDCurrentDependChanging(int value);
    partial void OnIDCurrentDependChanged();
    partial void OnTempChanging(int value);
    partial void OnTempChanged();
    partial void OnMinCurrentChanging(int value);
    partial void OnMinCurrentChanged();
    #endregion
		
		public ElementCurrentLimit()
		{
			this._CurrentDepend = default(EntityRef<CurrentDepend>);
			this._PowerLineDiscription = default(EntityRef<PowerLineDiscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPowerLine", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPowerLine
		{
			get
			{
				return this._IDPowerLine;
			}
			set
			{
				if ((this._IDPowerLine != value))
				{
					if (this._PowerLineDiscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPowerLineChanging(value);
					this.SendPropertyChanging();
					this._IDPowerLine = value;
					this.SendPropertyChanged("IDPowerLine");
					this.OnIDPowerLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDElementPosition", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDElementPosition
		{
			get
			{
				return this._IDElementPosition;
			}
			set
			{
				if ((this._IDElementPosition != value))
				{
					this.OnIDElementPositionChanging(value);
					this.SendPropertyChanging();
					this._IDElementPosition = value;
					this.SendPropertyChanged("IDElementPosition");
					this.OnIDElementPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCurrentDepend", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCurrentDepend
		{
			get
			{
				return this._IDCurrentDepend;
			}
			set
			{
				if ((this._IDCurrentDepend != value))
				{
					if (this._CurrentDepend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCurrentDependChanging(value);
					this.SendPropertyChanging();
					this._IDCurrentDepend = value;
					this.SendPropertyChanged("IDCurrentDepend");
					this.OnIDCurrentDependChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Temp
		{
			get
			{
				return this._Temp;
			}
			set
			{
				if ((this._Temp != value))
				{
					this.OnTempChanging(value);
					this.SendPropertyChanging();
					this._Temp = value;
					this.SendPropertyChanged("Temp");
					this.OnTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinCurrent", DbType="Int NOT NULL")]
		public int MinCurrent
		{
			get
			{
				return this._MinCurrent;
			}
			set
			{
				if ((this._MinCurrent != value))
				{
					this.OnMinCurrentChanging(value);
					this.SendPropertyChanging();
					this._MinCurrent = value;
					this.SendPropertyChanged("MinCurrent");
					this.OnMinCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentDepend_ElementCurrentLimit", Storage="_CurrentDepend", ThisKey="IDCurrentDepend", OtherKey="ID", IsForeignKey=true)]
		public CurrentDepend CurrentDepend
		{
			get
			{
				return this._CurrentDepend.Entity;
			}
			set
			{
				CurrentDepend previousValue = this._CurrentDepend.Entity;
				if (((previousValue != value) 
							|| (this._CurrentDepend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentDepend.Entity = null;
						previousValue.ElementCurrentLimit.Remove(this);
					}
					this._CurrentDepend.Entity = value;
					if ((value != null))
					{
						value.ElementCurrentLimit.Add(this);
						this._IDCurrentDepend = value.ID;
					}
					else
					{
						this._IDCurrentDepend = default(int);
					}
					this.SendPropertyChanged("CurrentDepend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerLineDiscription_ElementCurrentLimit", Storage="_PowerLineDiscription", ThisKey="IDPowerLine", OtherKey="ID", IsForeignKey=true)]
		public PowerLineDiscription PowerLineDiscription
		{
			get
			{
				return this._PowerLineDiscription.Entity;
			}
			set
			{
				PowerLineDiscription previousValue = this._PowerLineDiscription.Entity;
				if (((previousValue != value) 
							|| (this._PowerLineDiscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerLineDiscription.Entity = null;
						previousValue.ElementCurrentLimit.Remove(this);
					}
					this._PowerLineDiscription.Entity = value;
					if ((value != null))
					{
						value.ElementCurrentLimit.Add(this);
						this._IDPowerLine = value.ID;
					}
					else
					{
						this._IDPowerLine = default(int);
					}
					this.SendPropertyChanged("PowerLineDiscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
